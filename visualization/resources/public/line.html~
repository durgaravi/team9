<html>
	<head>
		<title>Byte Frequency Analysis</title>
		<script src="js/d3.v3.js"></script>
		<script src="js/jquery.js"></script>
		
		<style>
			path {
				stroke: #36648B;
				stroke-width: 2;
				fill: none;
			}
			.axis {
			  shape-rendering: crispEdges;
			}
			.x.axis line {
			  stroke: lightgrey;
			}
			.x.axis .minor {
			  stroke-opacity: .5;
			}
			.x.axis path {
			  display: none;
			}
			.y.axis line, .y.axis path {
			  fill: none;
			  stroke: #000;
			}
			.infobox {
			 border:2px solid steelblue;
			 border-radius:4px;
			 box-shadow:#333333 0px 0px 10px;
			 margin:200px auto;
			 padding:5px 10px;
			 background:rgba(255, 255, 255, 0.8);
			 position:absolute;
			 top:0px;
			 left:0px;
			 z-index:10500;
			 font-weight:bold;
			}
		</style>
	</head>
	<body>

	<div id="graph" class="aGraph" style="position:absolute;top:0px;left:0; float:left;"></div>

	<script>
		var m = [80, 80, 80, 80]; // margins
		var w = 1000 - m[1] - m[3]; // width
		var h = 400 - m[0] - m[2]; // height
		
		d3.json("text-html.json",function(error, alldata) {
  			if (error) throw error;

		var data = d3.values(alldata);
		//data.sort(function(a,b){return b-a});
		//var max1 = data[0];
		//var max2 = data[1];
		data = d3.values(alldata);
		console.log(data);
		var x = d3.scale.linear().domain([0, data.length]).range([0, w]);
		var y = d3.scale.linear().domain([0, Math.max.apply(null,data)]).range([h,0]);
		var line = d3.svg.line()
			.x(function(d,i) { 
				return x(i); 
			})
			.y(function(d) { 
				return y(d); 
			})
		
			var svg = d3.select("#graph").append("svg:svg")
			      .attr("width", w + m[1] + m[3])
			      .attr("height", h + m[0] + m[2])
			    .append("svg:g")
			      .attr("transform", "translate(" + m[3] + "," + m[0] + ")");
			
			var xAxis = d3.svg.axis().scale(x).tickSize(-h).tickSubdivide(true);
			svg.append("svg:g")
			      .attr("class", "x axis")
			      .attr("transform", "translate(0," + h + ")")
			      .call(xAxis);


			var yAxisLeft = d3.svg.axis().scale(y).ticks(4).orient("left");
			svg.append("svg:g")
			      .attr("class", "y axis")
			      .attr("transform", "translate(-25,0)")
			      .call(yAxisLeft);
			svg.append("svg:path").attr("d", line(data));

			svg.selectAll("circle")
			 .data(data)
			 .enter().append("circle")
			 .attr("fill", "steelblue")
			 .attr("r", 2)
			 .attr("cx", function(d,i) {return x(i);})
			 .attr("cy", function(d) {return y(d);})
			 .on("mouseover", function(d,i) { showData(this, d,i);})
			 .on("mouseout", function(){ hideData();});
			 
			 svg.append("svg:path").attr("d", line(data));
			 svg.append("svg:text")
			 .attr("x", -200)
			 .attr("y", -90)
			 .attr("dy", ".1em")
			 .attr("transform", "rotate(-90)")
			 .text("Trending Value");
			 
			 
			 $("body").append("<div class='infobox' style='display:none;'>Test</div>");
			 
		});	
	function showData(obj, d,i) 
	{
		 var coord = d3.mouse(obj);
		 var infobox = d3.select(".infobox");
		 var nonprintable = ["NULL",'START OF HEADING','START OF TEXT','END OF TEXT','END OF TRANSMISSION','END OF QUERY','ACKNOWLEDGE','BEEP','BACKSPACE','HORIZONTAL TAB','LINE FEED','VERTICAL TAB','FORM FEED','CARRIAGE RETURN','SHIFT OUT','SHIFT IN','DATA LINK ESCAPE','DEVICE CONTROL 1','DEVICE CONTROL 2','DEVICE CONTROL 3','DEVICE CONTROL 4','NEGATIVE ACKNOWLEDGEMENT','SYNCHRONIZE','END OF TRANSMISSION BLOCK','CANCEL','END OF MEDIUM','SUBSTITUTE','ESCAPE','FILE SEPARATOR','GROUP SEPARATOR','RECORD SEPARATOR','UNIT SEPARATOR','SPACE'];
		 infobox.style("left", (coord[0] + 100) + "px" );
		 infobox.style("top", (coord[1] - 175) + "px");
		 index = parseInt(i);
		 $(".infobox").html("Byte number: "+i+"<br>Byte: "+(index < 33 ? nonprintable[index]:String.fromCharCode(i))+"<br> Correlation= "+d);
		 $(".infobox").show();
	}
	function hideData() 
	{
		$(".infobox").hide();
	}
	</script>



	</body>
</html>
